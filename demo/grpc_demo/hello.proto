syntax="proto3";

option go_package="./hello";

service People {
  rpc SayHello(Hello) returns (Hello) {}
  rpc SayHelloAgain(Hello) returns (Hello) {}
}


message Hello {
  string Name = 1;
  string Text = 2;
}

// 安装protoc
// protoc 使用cmake和bazel 编译安装
// go get google.golang.org/protobuf/cmd/protoc-gen-go \
//         google.golang.org/grpc/cmd/protoc-gen-go-grpc
// 安装protoc-gen-go-grpc, install一下，移入export PATH，protoc才可以使用protoc-gen-go-grpc等插件生成.go的grpc，protobuf文件
// 编写 .proto文件，用protoc命令生成 grpc，protobuf等go文件


// Protobuf核心的工具集是C++语言开发的，在官方的protoc编译器中并不支持Go语言。
// 其中go_out参数告知protoc编译器去加载对应的protoc-gen-go工具，然后通过该工具生成代码，生成代码放到当前目录。
// protoc -I=. --go_out=. --go-grpc_out=. --go_opt=paths=source_relative  hello.proto

// Linux
// protoc -I=. --go_out=plugins=grpc:. --go_opt=paths=source_relative  hello.proto


// 不过在protoc-gen-go内部已经集成了一个名字为grpc的插件，可以针对gRPC生成代码：
// protoc --go_out=plugins=grpc:. hello.proto